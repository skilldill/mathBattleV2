import React, { useState } from 'react';
import { IonButton, IonText } from '@ionic/react';
import { ColumnLayout } from '../ColumnLayout/ColumnLayout';

type TaskSettingProps = {
    onClick: (count: number, difficulty: string) => void;
}

export const TasksSetting: React.FC<TaskSettingProps> = ({ onClick }) => {
    const [selectedDifficulty, setSelectedDifficulty] = useState<string>('');

    const handleClick = (count: number, difficulty: string, description: string) => {
        setSelectedDifficulty(description);
        onClick(count, difficulty);
    }

    return (
        <ColumnLayout>
            <IonText>
                <h4>{selectedDifficulty ? `–í—ã–±—Ä–∞–Ω–æ: ${selectedDifficulty}` : '–í—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å üëá'}</h4>
            </IonText>
            <IonButton size='large' fill='outline' onClick={() => handleClick(10, 'easy', '–ú–∞–ª—ã—à üë∂')}>
                üë∂ –ú–∞–ª—ã—à - 10 –ø—Ä–∏–º–µ—Ä–æ–≤ 
            </IonButton>
            <IonButton size='large' fill='outline' onClick={() => handleClick(10, 'medium', '–®–∫–æ–ª—å–Ω–∏–∫ üë¶')}>
                üë¶ –®–∫–æ–ª—å–Ω–∏–∫ - 10 –ø—Ä–∏–º–µ—Ä–æ–≤
            </IonButton>
            <IonButton size='large' fill='outline' onClick={() => handleClick(10, 'hard', '–°—Ç—É–¥–µ–Ω—Ç üë®‚Äçüéì')}>
                üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç - 10 –ø—Ä–∏–º–µ—Ä–æ–≤
            </IonButton>
            <IonButton size='large' fill='outline' onClick={() => handleClick(20, 'combo', '–ù–∏–Ω–¥–∑—è ü•∑')}>
                ü•∑ –ù–∏–Ω–¥–∑—è - 20 –ø—Ä–∏–º–µ—Ä–æ–≤, –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –¥–æ —Å–ª–æ–∂–Ω—ã—Ö
            </IonButton>
        </ColumnLayout>
    );
};

