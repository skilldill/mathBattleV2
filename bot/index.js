import { config } from 'dotenv';
import { Telegraf } from 'telegraf';
import { START_MESSAGE_MAP, QUESTION_MESSAGE_MAP, BUTTON_MESSAGE_MAP, MESSAGE_BUTTON_TEXT } from './constants';
import mongoose from 'mongoose';
import { ResultModel } from './db/ResultModel';
import { UserModel } from './db/UserModel';

config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const ADMIN_ID = process.env.ADMIN_ID;

const saveUserToDB = async ({ userId, username, firstName, lastName, language }) => {
  const user = await UserModel.findOne({ userId });
  if (user) return;
  await UserModel.create({ userId, username, firstName, lastName, language });
}

export function connectDB() {
  try {
    console.log('Connecting to MongoDB', process.env.MONGODB_URI);
    const mongoUrl = process.env.MONGODB_URI || 'mongodb://mongodb:27017/math';
    mongoose.connect(mongoUrl);
    console.log('üì¶ Connected to MongoDB');
  } catch (error) {
    console.error('Failed to connect to MongoDB:', error);
    process.exit(1);
  }
}
// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
connectDB();

const getUrlWebApp = (userId, username) => `https://app.math-battle.ru?u91x=${userId}&x_3z9=${username}`;

const openWebApp = async (ctx) => {
  if (!ctx || !ctx.from) return getUrlWebApp('', '');
  try {
    const user = await UserModel.findOne({ userId: ctx.from.id });
    if (!user) {
      await saveUserToDB({
        userId: ctx.from.id,
        username: ctx.from.username || '–º–∞—Ç–µ–º–∞—Ç–∏–∫',
        firstName: ctx.from.first_name || '–º–∞—Ç–µ–º–∞—Ç–∏–∫',
        lastName: ctx.from.last_name || '–º–∞—Ç–µ–º–∞—Ç–∏–∫',
        language: ctx.from.language_code || 'en'
      });

      if (ADMIN_ID) {
        bot.telegram.sendMessage(
          ADMIN_ID,
          `–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è! üë®‚Äçüéì\n–ò–º—è: ${ctx.from.first_name || ''} ${ctx.from.last_name || ''}\nUsername: @${ctx.from.username || '–Ω–µ—Ç'}\nID: ${ctx.from.id}`
        );
      }
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ WebApp:', error);
  }

  return getUrlWebApp(ctx.from.id, ctx.from.username);
}

bot.start(async (ctx) => {
  const message = START_MESSAGE_MAP[ctx.from.language_code] || START_MESSAGE_MAP['en'];

  ctx.reply(message)

  await saveUserToDB({
    userId: ctx.from.id,
    username: ctx.from.username || '–º–∞—Ç–µ–º–∞—Ç–∏–∫',
    firstName: ctx.from.first_name || '–º–∞—Ç–µ–º–∞—Ç–∏–∫',
    lastName: ctx.from.last_name || '–º–∞—Ç–µ–º–∞—Ç–∏–∫',
    language: ctx.from.language_code || 'en'
  });

  if (ADMIN_ID) {
    bot.telegram.sendMessage(
      ADMIN_ID,
      `–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è! üë®‚Äçüéì\n–ò–º—è: ${ctx.from.first_name || ''} ${ctx.from.last_name || ''}\nUsername: @${ctx.from.username || '–Ω–µ—Ç'}\nID: ${ctx.from.id}`
    );
  }

  const questionMessage = QUESTION_MESSAGE_MAP[ctx.from.language_code] || QUESTION_MESSAGE_MAP['en'];
  const buttonMessage = BUTTON_MESSAGE_MAP[ctx.from.language_code] || BUTTON_MESSAGE_MAP['en'];

  ctx.reply(questionMessage, {
    reply_markup: {
      keyboard: [[{
        text: buttonMessage,
        web_app: { url: openWebApp(ctx.from.id, ctx.from.username) }
      }]],
      resize_keyboard: true
    }
  })

})

bot.command('health', (ctx) => {
  if (`${ctx.from.id}` !== `${ADMIN_ID}`) return;
  ctx.reply('üî• Math Battle Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!')
})

bot.command('users', async (ctx) => {
  if (`${ctx.from.id}` !== `${ADMIN_ID}`) return;

  try {
    const users = await UserModel.find();

    if (users.length === 0) {
      ctx.reply('–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–≤ –≤ –±–æ—Ç–µ –Ω–µ—Ç ü§ñ');
      return;
    }

    ctx.reply(users.map(user =>
      `üë®‚Äçüéì ${user.username} ${user.firstName} ${user.lastName} ${user.language}`
    ).join('\n'));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!');
  }
})

// bot.command('users', async (ctx) => {
//   if (`${ctx.from.id}` !== `${ADMIN_ID}`) return;

//   try {
//     const uniquePlayers = await ResultModel.aggregate([
//       {
//         $group: { _id: "$userId" }
//       },
//       {
//         $project: { _id: 0, userId: "$_id" }
//       },
//       { $sort: { userId: 1 } } // —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
//     ]);

//     if (uniquePlayers.length === 0) {
//       return ctx.reply('–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤.');
//     }

//     const usersList = uniquePlayers.map((u, idx) => `${idx + 1}. ${u.userId}`).join('\n');

//     await ctx.reply(`üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:\n\n${usersList}`);
//   } catch (error) {
//     console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:', error);
//     await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!');
//   }
// })

bot.launch()
console.log('ü§ñ Math Battle Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!')
